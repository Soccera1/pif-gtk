name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper-compat libgtk-3-dev libnotify-dev pkg-config devscripts

      - name: Build binaries
        run: make

      - name: Get next version
        id: get_next_version
        run: |
          LATEST_TAG=$(git tag --list "v1.0.*" | grep -E '^v1\.0\.[0-9]+$' | sort -V | tail -n1)
          if [[ -z "$LATEST_TAG" ]]; then
            NEXT_VERSION="v1.0.0"
          else
            PATCH_NUMBER=$(echo "$LATEST_TAG" | grep -oE '[0-9]+$')
            NEXT_PATCH=$((PATCH_NUMBER + 1))
            NEXT_VERSION="v1.0.${NEXT_PATCH}"
          fi
          NEXT_VERSION_DEB="${NEXT_VERSION#v}"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "NEXT_VERSION_DEB=$NEXT_VERSION_DEB" >> $GITHUB_OUTPUT

      - name: Create upstream tarball
        run: |
          VERSION="${{ steps.get_next_version.outputs.NEXT_VERSION_DEB }}"
          PACKAGE_NAME="pif-gtk"
          TARBALL_NAME="${PACKAGE_NAME}_${VERSION}.orig.tar.gz"
          git archive --format=tar.gz --prefix=${PACKAGE_NAME}-${VERSION}/ HEAD > ../${TARBALL_NAME}

      - name: Build Debian package
        run: |
          export DEBEMAIL="action@github.com"
          export EMAIL="action@github.com"
          dch -v ${{ steps.get_next_version.outputs.NEXT_VERSION_DEB }} "New release"
          dpkg-buildpackage -us -uc

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse ${{ steps.get_next_version.outputs.NEXT_VERSION }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_next_version.outputs.NEXT_VERSION }}
          release_name: ${{ steps.get_next_version.outputs.NEXT_VERSION }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Upload pif binary
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pif
          asset_name: pif
          asset_content_type: application/octet-stream

      - name: Upload pif-gtk binary
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pif-gtk
          asset_name: pif-gtk
          asset_content_type: application/octet-stream

      - name: Upload Debian package
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../pif-gtk_${{ steps.get_next_version.outputs.NEXT_VERSION_DEB }}_amd64.deb
          asset_name: pif-gtk_${{ steps.get_next_version.outputs.NEXT_VERSION_DEB }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package